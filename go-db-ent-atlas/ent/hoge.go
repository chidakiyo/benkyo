// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/chidakiyo/benkyo/go-db-ent-atlas/ent/hoge"
)

// Hoge is the model entity for the Hoge schema.
type Hoge struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hoge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hoge.FieldID, hoge.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hoge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hoge fields.
func (h *Hoge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hoge.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case hoge.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Hoge.
// Note that you need to call Hoge.Unwrap() before calling this method if this Hoge
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hoge) Update() *HogeUpdateOne {
	return (&HogeClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hoge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hoge) Unwrap() *Hoge {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hoge is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hoge) String() string {
	var builder strings.Builder
	builder.WriteString("Hoge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Hoges is a parsable slice of Hoge.
type Hoges []*Hoge

func (h Hoges) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
