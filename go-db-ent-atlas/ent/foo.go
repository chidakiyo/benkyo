// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/chidakiyo/benkyo/go-db-ent-atlas/ent/foo"
)

// Foo is the model entity for the Foo schema.
type Foo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FooFoo holds the value of the "foo_foo" field.
	FooFoo string `json:"foo_foo,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Foo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case foo.FieldID:
			values[i] = new(sql.NullInt64)
		case foo.FieldFooFoo:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Foo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Foo fields.
func (f *Foo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case foo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case foo.FieldFooFoo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field foo_foo", values[i])
			} else if value.Valid {
				f.FooFoo = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Foo.
// Note that you need to call Foo.Unwrap() before calling this method if this Foo
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Foo) Update() *FooUpdateOne {
	return (&FooClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Foo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Foo) Unwrap() *Foo {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Foo is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Foo) String() string {
	var builder strings.Builder
	builder.WriteString("Foo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("foo_foo=")
	builder.WriteString(f.FooFoo)
	builder.WriteByte(')')
	return builder.String()
}

// Foos is a parsable slice of Foo.
type Foos []*Foo

func (f Foos) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
