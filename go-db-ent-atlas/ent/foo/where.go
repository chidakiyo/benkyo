// Code generated by ent, DO NOT EDIT.

package foo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/chidakiyo/benkyo/go-db-ent-atlas/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FooFoo applies equality check predicate on the "foo_foo" field. It's identical to FooFooEQ.
func FooFoo(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFooFoo), v))
	})
}

// FooFooEQ applies the EQ predicate on the "foo_foo" field.
func FooFooEQ(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFooFoo), v))
	})
}

// FooFooNEQ applies the NEQ predicate on the "foo_foo" field.
func FooFooNEQ(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFooFoo), v))
	})
}

// FooFooIn applies the In predicate on the "foo_foo" field.
func FooFooIn(vs ...string) predicate.Foo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFooFoo), v...))
	})
}

// FooFooNotIn applies the NotIn predicate on the "foo_foo" field.
func FooFooNotIn(vs ...string) predicate.Foo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFooFoo), v...))
	})
}

// FooFooGT applies the GT predicate on the "foo_foo" field.
func FooFooGT(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFooFoo), v))
	})
}

// FooFooGTE applies the GTE predicate on the "foo_foo" field.
func FooFooGTE(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFooFoo), v))
	})
}

// FooFooLT applies the LT predicate on the "foo_foo" field.
func FooFooLT(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFooFoo), v))
	})
}

// FooFooLTE applies the LTE predicate on the "foo_foo" field.
func FooFooLTE(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFooFoo), v))
	})
}

// FooFooContains applies the Contains predicate on the "foo_foo" field.
func FooFooContains(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFooFoo), v))
	})
}

// FooFooHasPrefix applies the HasPrefix predicate on the "foo_foo" field.
func FooFooHasPrefix(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFooFoo), v))
	})
}

// FooFooHasSuffix applies the HasSuffix predicate on the "foo_foo" field.
func FooFooHasSuffix(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFooFoo), v))
	})
}

// FooFooEqualFold applies the EqualFold predicate on the "foo_foo" field.
func FooFooEqualFold(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFooFoo), v))
	})
}

// FooFooContainsFold applies the ContainsFold predicate on the "foo_foo" field.
func FooFooContainsFold(v string) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFooFoo), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Foo) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Foo) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Foo) predicate.Foo {
	return predicate.Foo(func(s *sql.Selector) {
		p(s.Not())
	})
}
