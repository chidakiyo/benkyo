// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"
)

// Tweet represents a row from 'Tweet'.
type Tweet struct {
	ID         string    `spanner:"ID" json:"ID"`                 // ID
	CreatedAt  time.Time `spanner:"CreatedAt" json:"CreatedAt"`   // CreatedAt
	ModifiedAt time.Time `spanner:"ModifiedAt" json:"ModifiedAt"` // ModifiedAt
	Text       string    `spanner:"Text" json:"Text"`             // Text
	UserID     string    `spanner:"UserID" json:"UserID"`         // UserID
}

func TweetPrimaryKeys() []string {
	return []string{
		"ID",
	}
}

func TweetColumns() []string {
	return []string{
		"ID",
		"CreatedAt",
		"ModifiedAt",
		"Text",
		"UserID",
	}
}

func (t *Tweet) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "ID":
			ret = append(ret, &t.ID)
		case "CreatedAt":
			ret = append(ret, &t.CreatedAt)
		case "ModifiedAt":
			ret = append(ret, &t.ModifiedAt)
		case "Text":
			ret = append(ret, &t.Text)
		case "UserID":
			ret = append(ret, &t.UserID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Tweet) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "ID":
			ret = append(ret, t.ID)
		case "CreatedAt":
			ret = append(ret, t.CreatedAt)
		case "ModifiedAt":
			ret = append(ret, t.ModifiedAt)
		case "Text":
			ret = append(ret, t.Text)
		case "UserID":
			ret = append(ret, t.UserID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTweet_Decoder returns a decoder which reads a row from *spanner.Row
// into Tweet. The decoder is not goroutine-safe. Don't use it concurrently.
func newTweet_Decoder(cols []string) func(*spanner.Row) (*Tweet, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Tweet, error) {
		var t Tweet
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Tweet) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Tweet", TweetColumns(), []interface{}{
		t.ID, t.CreatedAt, t.ModifiedAt, t.Text, t.UserID,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Tweet) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("Tweet", TweetColumns(), []interface{}{
		t.ID, t.CreatedAt, t.ModifiedAt, t.Text, t.UserID,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Tweet) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("Tweet", TweetColumns(), []interface{}{
		t.ID, t.CreatedAt, t.ModifiedAt, t.Text, t.UserID,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Tweet) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TweetPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Tweet.UpdateColumns", "Tweet", err)
	}

	return spanner.Update("Tweet", colsWithPKeys, values), nil
}

// FindTweet gets a Tweet by primary key
func FindTweet(ctx context.Context, db YORODB, id string) (*Tweet, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "Tweet", key, TweetColumns())
	if err != nil {
		return nil, newError("FindTweet", "Tweet", err)
	}

	decoder := newTweet_Decoder(TweetColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTweet", "Tweet", err)
	}

	return t, nil
}

// ReadTweet retrieves multiples rows from Tweet by KeySet as a slice.
func ReadTweet(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Tweet, error) {
	var res []*Tweet

	decoder := newTweet_Decoder(TweetColumns())

	rows := db.Read(ctx, "Tweet", keys, TweetColumns())
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTweet", "Tweet", err)
	}

	return res, nil
}

// Delete deletes the Tweet from the database.
func (t *Tweet) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TweetPrimaryKeys())
	return spanner.Delete("Tweet", spanner.Key(values))
}

// FindTweetsByUserID retrieves multiple rows from 'Tweet' as a slice of Tweet.
//
// Generated from index 'IDX_Tweet_UserID_879DCEA9346212D7'.
func FindTweetsByUserID(ctx context.Context, db YORODB, userID string) ([]*Tweet, error) {
	const sqlstr = "SELECT " +
		"ID, CreatedAt, ModifiedAt, Text, UserID " +
		"FROM Tweet@{FORCE_INDEX=IDX_Tweet_UserID_879DCEA9346212D7} " +
		"WHERE UserID = @param0"

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = userID

	decoder := newTweet_Decoder(TweetColumns())

	// run query
	YOLog(ctx, sqlstr, userID)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*Tweet{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindTweetsByUserID", "Tweet", err)
		}

		t, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindTweetsByUserID", "Tweet", err)
		}

		res = append(res, t)
	}

	return res, nil
}

// ReadTweetsByUserID retrieves multiples rows from 'Tweet' by KeySet as a slice.
//
// This does not retrives all columns of 'Tweet' because an index has only columns
// used for primary key, index key and storing columns. If you need more columns, add storing
// columns or Read by primary key or Query with join.
//
// Generated from unique index 'IDX_Tweet_UserID_879DCEA9346212D7'.
func ReadTweetsByUserID(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Tweet, error) {
	var res []*Tweet
	columns := []string{
		"ID",
		"UserID",
	}

	decoder := newTweet_Decoder(columns)

	rows := db.ReadUsingIndex(ctx, "Tweet", "IDX_Tweet_UserID_879DCEA9346212D7", keys, columns)
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTweetsByUserID", "Tweet", err)
	}

	return res, nil
}

// FindTweetByUserID retrieves a row from 'Tweet' as a Tweet.
//
// If no row is present with the given key, then ReadRow returns an error where
// spanner.ErrCode(err) is codes.NotFound.
//
// Generated from unique index 'IDX_Tweet_UserID_U_EF87C5C34BD3EE10'.
func FindTweetByUserID(ctx context.Context, db YORODB, userID string) (*Tweet, error) {
	const sqlstr = "SELECT " +
		"ID, CreatedAt, ModifiedAt, Text, UserID " +
		"FROM Tweet@{FORCE_INDEX=IDX_Tweet_UserID_U_EF87C5C34BD3EE10} " +
		"WHERE UserID = @param0"

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = userID

	decoder := newTweet_Decoder(TweetColumns())

	// run query
	YOLog(ctx, sqlstr, userID)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	row, err := iter.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, newErrorWithCode(codes.NotFound, "FindTweetByUserID", "Tweet", err)
		}
		return nil, newError("FindTweetByUserID", "Tweet", err)
	}

	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTweetByUserID", "Tweet", err)
	}

	return t, nil
}

// ReadTweetByUserID retrieves multiples rows from 'Tweet' by KeySet as a slice.
//
// This does not retrives all columns of 'Tweet' because an index has only columns
// used for primary key, index key and storing columns. If you need more columns, add storing
// columns or Read by primary key or Query with join.
//
// Generated from unique index 'IDX_Tweet_UserID_U_EF87C5C34BD3EE10'.
func ReadTweetByUserID(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Tweet, error) {
	var res []*Tweet
	columns := []string{
		"ID",
		"UserID",
	}

	decoder := newTweet_Decoder(columns)

	rows := db.ReadUsingIndex(ctx, "Tweet", "IDX_Tweet_UserID_U_EF87C5C34BD3EE10", keys, columns)
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTweetByUserID", "Tweet", err)
	}

	return res, nil
}
